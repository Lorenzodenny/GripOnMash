// <auto-generated />
using System;
using GripOnMash.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GripOnMash.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241023152300_AggiuntoCampoSuAspnetUserPerCodiceMedico")]
    partial class AggiuntoCampoSuAspnetUserPerCodiceMedico
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GripOnMash.Models.Agenda", b =>
                {
                    b.Property<int>("AgendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgendaId"));

                    b.Property<string>("GiornoSettimana")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("InternalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumeroMassimoPazienti")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OraInizio")
                        .HasColumnType("time");

                    b.Property<DateTime>("ValidoDalGiorno")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidoFinoAlGiorno")
                        .HasColumnType("datetime2");

                    b.HasKey("AgendaId");

                    b.HasIndex("InternalUserId");

                    b.ToTable("Agenda", (string)null);
                });

            modelBuilder.Entity("GripOnMash.Models.Appuntamento", b =>
                {
                    b.Property<int>("AppuntamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppuntamentoId"));

                    b.Property<int>("CodiceGenerato")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAppuntamento")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppuntamentoId");

                    b.HasIndex("IdentityId");

                    b.ToTable("Appuntamento", (string)null);
                });

            modelBuilder.Entity("GripOnMash.Models.Domanda", b =>
                {
                    b.Property<int>("DomandaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomandaId"));

                    b.Property<bool>("DomandaInclusione")
                        .HasColumnType("bit");

                    b.Property<string>("DomandaTesto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DomandaTooltip")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("DomandaId");

                    b.ToTable("Domanda", (string)null);
                });

            modelBuilder.Entity("GripOnMash.Models.EsitoQuestionario", b =>
                {
                    b.Property<int>("EsitoQuestionarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EsitoQuestionarioId"));

                    b.Property<string>("MedicoBaseId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PazienteIdoneo")
                        .HasColumnType("bit");

                    b.HasKey("EsitoQuestionarioId");

                    b.HasIndex("MedicoBaseId");

                    b.ToTable("EsitoQuestionario", (string)null);
                });

            modelBuilder.Entity("GripOnMash.Models.IdentityModel.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CodiceOtp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodiceRandomico")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "46dafb0c-f49c-4d75-b2f8-4eb3183c546a",
                            AccessFailedCount = 0,
                            CodiceOtp = "CodiceOtpSilveriMarco",
                            CodiceRandomico = "A1B2",
                            Cognome = "Silveri",
                            ConcurrencyStamp = "fd293dfc-18cd-4783-b12d-09ef49aa7919",
                            Email = "medicobase1@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Nome = "Marco",
                            NormalizedEmail = "MEDICOBASE1@GMAIL.COM",
                            NormalizedUserName = "MEDICOBASE1_UNICO",
                            PasswordHash = "AQAAAAIAAYagAAAAEDUyMHFdOvoBzhsPI5sQkGYwJ0yFgcS4QJTw8m/GL0OmSl1S6op4BdNxJD7RYgru7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "330ea23c-dfdb-487f-ae64-cfc5bc263ed9",
                            TwoFactorEnabled = false,
                            UserName = "medicoBase1_unico"
                        },
                        new
                        {
                            Id = "3aa43883-0392-4eeb-a6db-a78d4267f04f",
                            AccessFailedCount = 0,
                            CodiceOtp = "CodiceOtpFrancescoGentile",
                            CodiceRandomico = "C3D4",
                            Cognome = "Gentile",
                            ConcurrencyStamp = "7ebf28fe-9cd0-4614-8d41-2ede037f3e03",
                            Email = "medicobase2@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Nome = "Francesco",
                            NormalizedEmail = "MEDICOBASE2@GMAIL.COM",
                            NormalizedUserName = "MEDICOBASE2_UNICO",
                            PasswordHash = "AQAAAAIAAYagAAAAEITWZfArf3zYaqG2pqwwGpMvLnm3dFJvMvFlqQJsKhqicXplqpU4uvrtsNnj/vXUjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6830e6ab-8c1a-4702-ad25-70b547878ae3",
                            TwoFactorEnabled = false,
                            UserName = "medicoBase2_unico"
                        });
                });

            modelBuilder.Entity("GripOnMash.Models.InternalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Matricola")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("InternalUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4983227c-0272-4078-86b5-84067653d162"),
                            Cognome = "Silveri",
                            IsEnabled = true,
                            Matricola = "sb004193",
                            Nome = "Marco"
                        },
                        new
                        {
                            Id = new Guid("ef6fd07e-0ca9-43d9-90d2-29bdeb2e9178"),
                            Cognome = "Picchi",
                            IsEnabled = true,
                            Matricola = "00665539",
                            Nome = "Daniele"
                        },
                        new
                        {
                            Id = new Guid("8b68bdde-bb67-4918-b84a-cdf1adde281e"),
                            Cognome = "Rossi",
                            IsEnabled = true,
                            Matricola = "sb004194",
                            Nome = "Mario"
                        });
                });

            modelBuilder.Entity("GripOnMash.Models.InternalUserAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Accesso")
                        .HasColumnType("datetime2");

                    b.Property<string>("Matricola")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ScadenzaToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Uscita")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InternalUserAccess", (string)null);
                });

            modelBuilder.Entity("GripOnMash.Models.InternalUserRole", b =>
                {
                    b.Property<Guid>("InternalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InternalUserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("InternalUserRole", (string)null);

                    b.HasData(
                        new
                        {
                            InternalUserId = new Guid("4983227c-0272-4078-86b5-84067653d162"),
                            RoleId = "fe232d35-f62d-407f-995b-1934d38d96cc"
                        },
                        new
                        {
                            InternalUserId = new Guid("ef6fd07e-0ca9-43d9-90d2-29bdeb2e9178"),
                            RoleId = "fe232d35-f62d-407f-995b-1934d38d96cc"
                        },
                        new
                        {
                            InternalUserId = new Guid("8b68bdde-bb67-4918-b84a-cdf1adde281e"),
                            RoleId = "fe232d35-f62d-407f-995b-1934d38d96cc"
                        });
                });

            modelBuilder.Entity("GripOnMash.Models.MedicoBaseAnagrafica", b =>
                {
                    b.Property<int>("MedicoBaseAnagraficaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicoBaseAnagraficaId"));

                    b.Property<string>("CodiceFiscale")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailPersonale")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Eta")
                        .HasColumnType("int");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroAlbo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumeroTelefono")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PartitaIVA")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Specializzazione")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MedicoBaseAnagraficaId");

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    b.ToTable("MedicoBaseAnagrafica", (string)null);

                    b.HasData(
                        new
                        {
                            MedicoBaseAnagraficaId = 1,
                            CodiceFiscale = "VRDGPP75E20H501Y",
                            Cognome = "Verdi",
                            EmailPersonale = "giuseppe.verdi@gmail.com",
                            Eta = 45,
                            IdentityId = "46dafb0c-f49c-4d75-b2f8-4eb3183c546a",
                            Indirizzo = "Via Roma 1, Milano",
                            Nome = "Giuseppe",
                            NumeroAlbo = "12345MI",
                            NumeroTelefono = "123456789",
                            PartitaIVA = "12345678901",
                            Specializzazione = "Cardiologia"
                        },
                        new
                        {
                            MedicoBaseAnagraficaId = 2,
                            CodiceFiscale = "BNCFNC82C15H501Z",
                            Cognome = "Bianchi",
                            EmailPersonale = "francesca.bianchi@gmail.com",
                            Eta = 38,
                            IdentityId = "3aa43883-0392-4eeb-a6db-a78d4267f04f",
                            Indirizzo = "Via Torino 10, Torino",
                            Nome = "Francesca",
                            NumeroAlbo = "67890TO",
                            NumeroTelefono = "987654321",
                            PartitaIVA = "98765432109",
                            Specializzazione = "Dermatologia"
                        });
                });

            modelBuilder.Entity("GripOnMash.Models.NumeroPrenotazione", b =>
                {
                    b.Property<int>("NumeroPrenotazioneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumeroPrenotazioneId"));

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<int>("MaxRange")
                        .HasColumnType("int");

                    b.Property<int>("MinRange")
                        .HasColumnType("int");

                    b.HasKey("NumeroPrenotazioneId");

                    b.ToTable("NumeroPrenotazione", (string)null);
                });

            modelBuilder.Entity("GripOnMash.Models.Risposta", b =>
                {
                    b.Property<int>("RispostaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RispostaId"));

                    b.Property<int>("DomandaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorretta")
                        .HasColumnType("bit");

                    b.Property<string>("RispostaTesto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("RispostaId");

                    b.HasIndex("DomandaId");

                    b.ToTable("Risposta", (string)null);
                });

            modelBuilder.Entity("GripOnMash.Models.RisposteEsitoQuestionario", b =>
                {
                    b.Property<int>("RisposteEsitoQuestionarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RisposteEsitoQuestionarioId"));

                    b.Property<int>("DomandaId")
                        .HasColumnType("int");

                    b.Property<int>("EsitoQuestionarioId")
                        .HasColumnType("int");

                    b.Property<int>("RispostaId")
                        .HasColumnType("int");

                    b.HasKey("RisposteEsitoQuestionarioId");

                    b.HasIndex("DomandaId");

                    b.HasIndex("EsitoQuestionarioId");

                    b.HasIndex("RispostaId");

                    b.ToTable("RisposteEsitoQuestionario", (string)null);
                });

            modelBuilder.Entity("GripOnMash.Models.Service.Email.MailConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MailConfig", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fe232d35-f62d-407f-995b-1934d38d96cc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "447b3ca6-bd0b-4e83-baf9-2de7069c10c5",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "46dafb0c-f49c-4d75-b2f8-4eb3183c546a",
                            RoleId = "447b3ca6-bd0b-4e83-baf9-2de7069c10c5"
                        },
                        new
                        {
                            UserId = "3aa43883-0392-4eeb-a6db-a78d4267f04f",
                            RoleId = "447b3ca6-bd0b-4e83-baf9-2de7069c10c5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GripOnMash.Models.Agenda", b =>
                {
                    b.HasOne("GripOnMash.Models.InternalUser", "InternalUser")
                        .WithMany("Agende")
                        .HasForeignKey("InternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternalUser");
                });

            modelBuilder.Entity("GripOnMash.Models.Appuntamento", b =>
                {
                    b.HasOne("GripOnMash.Models.IdentityModel.ApplicationUser", "IdentityUser")
                        .WithMany("Appuntamenti")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("GripOnMash.Models.EsitoQuestionario", b =>
                {
                    b.HasOne("GripOnMash.Models.IdentityModel.ApplicationUser", "MedicoBase")
                        .WithMany()
                        .HasForeignKey("MedicoBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicoBase");
                });

            modelBuilder.Entity("GripOnMash.Models.InternalUserRole", b =>
                {
                    b.HasOne("GripOnMash.Models.InternalUser", "InternalUser")
                        .WithMany("InternalUserRoles")
                        .HasForeignKey("InternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternalUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GripOnMash.Models.MedicoBaseAnagrafica", b =>
                {
                    b.HasOne("GripOnMash.Models.IdentityModel.ApplicationUser", "IdentityUser")
                        .WithOne("MedicoBaseAnagrafica")
                        .HasForeignKey("GripOnMash.Models.MedicoBaseAnagrafica", "IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("GripOnMash.Models.Risposta", b =>
                {
                    b.HasOne("GripOnMash.Models.Domanda", "Domanda")
                        .WithMany("Risposte")
                        .HasForeignKey("DomandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domanda");
                });

            modelBuilder.Entity("GripOnMash.Models.RisposteEsitoQuestionario", b =>
                {
                    b.HasOne("GripOnMash.Models.Domanda", "Domanda")
                        .WithMany()
                        .HasForeignKey("DomandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GripOnMash.Models.EsitoQuestionario", "EsitoQuestionario")
                        .WithMany("RisposteEsitoQuestionario")
                        .HasForeignKey("EsitoQuestionarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GripOnMash.Models.Risposta", "Risposta")
                        .WithMany()
                        .HasForeignKey("RispostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domanda");

                    b.Navigation("EsitoQuestionario");

                    b.Navigation("Risposta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GripOnMash.Models.IdentityModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GripOnMash.Models.IdentityModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GripOnMash.Models.IdentityModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GripOnMash.Models.IdentityModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GripOnMash.Models.Domanda", b =>
                {
                    b.Navigation("Risposte");
                });

            modelBuilder.Entity("GripOnMash.Models.EsitoQuestionario", b =>
                {
                    b.Navigation("RisposteEsitoQuestionario");
                });

            modelBuilder.Entity("GripOnMash.Models.IdentityModel.ApplicationUser", b =>
                {
                    b.Navigation("Appuntamenti");

                    b.Navigation("MedicoBaseAnagrafica")
                        .IsRequired();
                });

            modelBuilder.Entity("GripOnMash.Models.InternalUser", b =>
                {
                    b.Navigation("Agende");

                    b.Navigation("InternalUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
